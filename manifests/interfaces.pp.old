# Manages /etc/network/interfaces file

class networking::interfaces(
        $node_type,
        $vlan_networking  = false,
        $vlan_interface   = 'eth0',
        $mgt_interface    = 'eth0',
        $mgt_ip,
        $mgt_mask         = '255.255.255.0',
        $mgt_gateway,
	$flat_vlan        = undef,
	$flat_ip          = undef,
        $flat_mask        = '255.255.255.0',
        $proxy_vlan       = undef,
        $proxy_ip         = undef,
	$proxy_mask       = '255.255.255.0',
	$public_vlan      = undef,
	$public_ip        = undef,
	$public_mask      = '255.255.255.0',
	$storage_vlan     = undef,
        $storage_ip       = undef,
        $storage_mask     = '255.255.255.0',
        $dns_servers,
        $dns_search)
{

 if $vlan_networking == true {
 
 file { "/etc/network/interfaces":
   owner   => root,
   group   => root,
   mode    => 644,
   content => template("networking/vlan/$node_type")
  }
 
  # Restarts VLAN networking after conf file changes
  exec { 'network-restart':
    command     => "/etc/init.d/networking restart",
    logoutput   => on_failure,
    subscribe   => File["/etc/network/interfaces"],
    refreshonly => true,
    path        => '/sbin/:/usr/sbin/:/usr/bin/:/bin/',
  }
 } else {
  
  file { "/etc/network/interfaces":
    owner   => root,
    group   => root,
    mode    => 644,
#  if $vlan_networking { content => template("networking/vlan/$node_type") }
    content => template("networking/$node_type")
  }

  # Restarts networking after conf file changes
  exec { 'network-restart':
    command     => "/etc/init.d/networking restart",
    logoutput   => on_failure,
    subscribe   => File["/etc/network/interfaces"],
    refreshonly => true,
    path        => '/sbin/:/usr/sbin/:/usr/bin/:/bin/',
  }
 }
}
